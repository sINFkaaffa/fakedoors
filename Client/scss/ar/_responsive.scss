$xs: 480px;
$sm: 768px;
$md: 992px;
$lg: 1200px;
$xl: 1500px;

$breakpoints: ("xs" $xs) ("sm" $sm) ("md" $md) ("lg" $lg) ("xl", $xl);

@mixin media($min-break-width, $max-break-width: null) {
	@if $max-break-width == null {
		@media #{"only screen and (min-width: " + $min-break-width + ")"} {
			@content;
		}
	} @else {
		@media #{"only screen and (min-width: " + $min-break-width + ") and (max-width: " + $max-break-width + ")"} {
			@content;
		}
	}

}

//====================================

$displays: none block inline inline-block table table-cell;

.d- {
	@each $display in $displays {
		&#{$display} { display: $display; }
	}

	@each $break in $breakpoints {
		$suffix: nth($break, 1);
		$breakwidth: nth($break, 2);

		@include media($breakwidth) {
			&#{$suffix}- {
				@each $display in $displays {
					&#{$display} { display: $display; }
				}
			}
		}

	}
}

//====================================

$ar-grid-max-width: 100%;
$ar-grid-columns: 12;

@mixin grid-row($font-size) {
	font-size: 0;
	& > * { font-size: $font-size; }
}

@mixin grid-column($index, $breakwidth: null) {
	$width: $ar-grid-max-width * $index/$ar-grid-columns;

	@if $breakwidth == null {
		@include inline-block;
		width: $width;
		box-sizing: border-box;
		vertical-align: top;
	} @else {
		@include media($breakwidth) {
			width: $width;
		}
	}
}

.grid {
	&-center {
		text-align: center;
		& > * { text-align: left; }
	}

	&-row {
		@include grid-row($ar-default-font-size);
	}

	&-column {
		@for $i from 0 through $ar-grid-columns {
			&-#{$i} { @include grid-column($i); }
		}

		@each $breakpoint in $breakpoints {
			$suffix: nth($breakpoint, 1);
			$breakwidth: nth($breakpoint, 2);

			&-#{$suffix} {
				@for $i from 0 through $ar-grid-columns {
					&-#{$i} {
						@include grid-column($i, $breakwidth);
					}
				}
			}
		}
	}
}
